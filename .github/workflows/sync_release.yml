name: Sync Releases
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
  # schedule:
  #   - cron:  '*/5 * * * *'
permissions:
  # Need `contents: read` to checkout the repository
  # Need `contents: write` to merge branches
  contents: write
jobs:
  compare-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4.1.1
      - name: Get latest release info for official cloudflared
        id: official_release
        run: |
          release_info=$(curl https://api.github.com/repos/cloudflare/cloudflared/releases/latest)
          echo "::set-output name=release_name::$(echo $release_info | jq .html_url | sed -n 's/.*\/tag\/\([^"]*\).*/\1/p')"
          echo "::set-output name=download_url::$(echo $release_info | jq '.assets[] | select(.name == "cloudflared-linux-amd64") | .browser_download_url')"
      - name: Get latest release info for my cloudflared-tunnel
        id: my_release
        run: |
          release_info=$(curl https://api.github.com/repos/Jake-Qu/cloudflared-tunnel/releases/latest)
          echo "::set-output name=release_name::$(echo $release_info | jq .html_url | sed -n 's/.*\/tag\/\([^"]*\).*/\1/p')"
      - name: Compare release names
        run: |
          if [ "${{ steps.official_release.outputs.release_name }}" == "${{ steps.my_release.outputs.release_name }}" ]; then
            echo "The latest releases of the two repositories have the same name."
            exit 1
          else
            git config --global user.email "qubo93@gmail.com"
            git config --global user.name "Jake-Qu"
            echo "The latest releases of the two repositories do not have the same name."
            git checkout -b ${{ steps.official_release.outputs.release_name }}
            origin_url=$(cat Dockerfile | sed -n '2p'| awk '{print $NF}')
            sed -i "s^${origin_url}^${{ steps.official_release.outputs.download_url }}^g" Dockerfile
            git add *
            git commit -m "Auto commit by GitHub Actions"
            git push origin ${{ steps.official_release.outputs.release_name }}
          fi
      # - name: merge branch to main
      #   uses: devvspaces/merge-branches@v1
      #   with:
      #       # Personal access token (PAT) used to merge branches. The PAT is configured
      #       # with the local git config, which enables your scripts to run authenticated git
      #       # commands.
      #       #
      #       # We recommend using a service account with the least permissions necessary. Also
      #       # when generating a new PAT, select the least scopes necessary.
      #       #
      #       # [Learn more about creating and using encrypted secrets]
      #       # (https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
      #     token: ${{ github.token }}
      #     # Branch to merge to other branch
      #     from_branch: origin/${{ steps.official_release.outputs.release_name }}
          
      #     # Branch to merge other branch on
      #     to_branch: main
      - name: Create and push a new Tag
        run: |
          git config --global user.email "qubo93@gmail.com"
          git config --global user.name "Jake-Qu"
          git checkout main
          git tag ${{ steps.official_release.outputs.release_name }}
          git push origin ${{ steps.official_release.outputs.release_name }}
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.latest_tag.outputs.tag_name }}
    needs: compare-releases
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4.1.1
      - name: Get Latest Tag
        id: latest_tag
        run: |
            tag_info=$(curl https://api.github.com/repos/cloudflare/cloudflared/tags)
            echo "::set-output name=tag_name::$(echo $tag_info | jq -r '.[] | .name' | head -1)"
      - name: print tag_name and change TAG_NAME
        run: |
            sed -i "s^TAG_NAME^${{ steps.latest_tag.outputs.tag_name }}^g" .github/release-drafter.yml
            cat .github/release-drafter.yml
      - uses: release-drafter/release-drafter@v6
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        with:
          config-name: release-drafter.yml
          disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # push_to_dockerhub:  # job的名字
  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest   # job运行的基础环境
  #   needs: update_release_draft
  #   steps:  # 一个job由一个或多个step组成
  #     - name: Check out the repo
  #       uses: actions/checkout@v4.1.1
  #     - name: Docker Login
  #       uses: docker/login-action@v2.1.0  # 三方的action操作， 执行docker login
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}  # 配置dockerhub的认证，在Github项目主页 【Settings】 -> 【Secrets】 添加对应变量
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build and push Docker image to origin tag
  #       uses: docker/build-push-action@v4.0.0 # docker build & push
  #       with:
  #         context: .
  #         push: true
  #         tags: qubo93/cloudflared-tunnel:${{ needs.update_release_draft.outputs.tag_name }}
  #     - name: Build and push Docker image to origin tag
  #       uses: docker/build-push-action@v4.0.0 # docker build & push
  #       with:
  #         context: .
  #         push: true
  #         tags: qubo93/cloudflared-tunnel:latest