name: Sync Releases
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
  # schedule:
  #   - cron:  '*/5 * * * *'
permissions:
  # Need `contents: read` to checkout the repository
  # Need `contents: write` to merge branches
  contents: write
jobs:
  compare-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4.1.1
      - name: Get latest release info for official cloudflared
        id: official_release
        run: |
          release_info=$(curl https://api.github.com/repos/cloudflare/cloudflared/releases/latest)
          echo "::set-output name=release_name::$(echo $release_info | jq .html_url | sed -n 's/.*\/tag\/\([^"]*\).*/\1/p')"
          echo "::set-output name=download_url::$(echo $release_info | jq '.assets[] | select(.name == "cloudflared-linux-amd64") | .browser_download_url')"
      - name: Get latest release info for my cloudflared-tunnel
        id: my_release
        run: |
          release_info=$(curl https://api.github.com/repos/Jake-Qu/cloudflared-tunnel/releases/latest)
          echo "::set-output name=release_name::$(echo $release_info | jq .html_url | sed -n 's/.*\/tag\/\([^"]*\).*/\1/p')"
      - name: Compare release names
        run: |
          if [ "${{ steps.official_release.outputs.release_name }}" == "${{ steps.my_release.outputs.release_name }}" ]; then
            echo "The latest releases of the two repositories have the same name."
            exit 1
          fi
      - name: Create and push a new Tag
        env:
          GITHUB_PAT: ${{ secrets.PUSH_GIT_TAG }}
        run: |
          git config --global user.email "qubo93@gmail.com"
          git config --global user.name "Jake-Qu"
          echo "The latest releases of the two repositories do not have the same name."
          origin_url=$(cat Dockerfile | sed -n '2p'| awk '{print $2}')
          sed -i "s^${origin_url}^${{ steps.official_release.outputs.download_url }}^g" Dockerfile
          git commit -am "Update Dockerfile to ${{ steps.official_release.outputs.release_name }}"
          git tag ${{ steps.official_release.outputs.release_name }}
          git push https://Jake-Qu:${GITHUB_PAT}@github.com/Jake-Qu/cloudflared-tunnel.git main --tags
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PUSH_GIT_TAG }}
        with:
          tag_name: ${{ steps.official_release.outputs.release_name }}
          release_name: "${{ steps.official_release.outputs.release_name }}"
          body: "base package from base package from https://github.com/cloudflare/cloudflared/releases/tag/${{ steps.official_release.outputs.release_name }}"
          draft: false
          prerelease: false


  # update_release_publish:
  #   permissions:
  #     # write permission is required to create a github release
  #     contents: write
  #     # write permission is required for autolabeler
  #     # otherwise, read permission is required at least
  #     pull-requests: write
  #   runs-on: ubuntu-latest
  #   outputs:
  #     tag_name: ${{ steps.latest_tag.outputs.tag_name }}
  #   needs: compare-releases
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v4.1.1
  #     - name: Get Latest Tag
  #       id: latest_tag
  #       run: |
  #           tag_info=$(curl https://api.github.com/repos/cloudflare/cloudflared/tags)
  #           echo "::set-output name=tag_name::$(echo $tag_info | jq -r '.[] | .name' | head -1)"
  #     - name: print tag_name and change TAG_NAME
  #       run: |
  #           sed -i "s^TAG_NAME^${{ steps.latest_tag.outputs.tag_name }}^g" .github/release-drafter.yml
  #           cat .github/release-drafter.yml
  #     - uses: release-drafter/release-drafter@v6.0.0
  #       # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
  #       with:
  #         name: ${{ steps.latest_tag.outputs.tag_name }}
  #         tag: ${{ steps.latest_tag.outputs.tag_name }}
  #         latest: true
  #         publish: true
  #         header: 'base package from https://github.com/cloudflare/cloudflared/releases/tag/${{ steps.latest_tag.outputs.tag_name }}'
  #         disable-autolabeler: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.PUSH_GIT_TAG }}
